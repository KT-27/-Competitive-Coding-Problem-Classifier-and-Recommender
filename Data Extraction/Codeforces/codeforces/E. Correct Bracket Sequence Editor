(iCodeforcesProblem
CodeforcesProblem
p0
(dp1
S'desription'
p2
VE. Correct Bracket Sequence Editor\u000atime limit per test2 seconds\u000amemory limit per test256 megabytes\u000ainputstandard input\u000aoutputstandard output\u000aRecently Polycarp started to develop a text editor that works only with correct bracket sequences (abbreviated as CBS).\u000aNote that a bracket sequence is correct if it is possible to get a correct mathematical expression by adding "+"-s and "1"-s to it. For example, sequences "(())()", "()" and "(()(()))" are correct, while ")(", "(()" and "(()))(" are not. Each bracket in CBS has a pair. For example, in "(()(()))":\u000a1st bracket is paired with 8th,\u000a2d bracket is paired with 3d,\u000a3d bracket is paired with 2d,\u000a4th bracket is paired with 7th,\u000a5th bracket is paired with 6th,\u000a6th bracket is paired with 5th,\u000a7th bracket is paired with 4th,\u000a8th bracket is paired with 1st.\u000aPolycarp's editor currently supports only three operations during the use of CBS. The cursor in the editor takes the whole position of one of the brackets (not the position between the brackets!). There are three operations being supported:\u000a«L» \u2014 move the cursor one position to the left,\u000a«R» \u2014 move the cursor one position to the right,\u000a«D» \u2014 delete the bracket in which the cursor is located, delete the bracket it's paired to and all brackets between them (that is, delete a substring between the bracket in which the cursor is located and the one it's paired to).\u000aAfter the operation "D" the cursor moves to the nearest bracket to the right (of course, among the non-deleted). If there is no such bracket (that is, the suffix of the CBS was deleted), then the cursor moves to the nearest bracket to the left (of course, among the non-deleted).\u000aThere are pictures illustrated several usages of operation "D" below.\u000aAll incorrect operations (shift cursor over the end of CBS, delete the whole CBS, etc.) are not supported by Polycarp's editor.\u000aPolycarp is very proud of his development, can you implement the functionality of his editor?\u000aInput\u000aThe first line contains three positive integers n, m and p (2\u2009\u2264\u2009n\u2009\u2264\u2009500\u2009000, 1\u2009\u2264\u2009m\u2009\u2264\u2009500\u2009000, 1\u2009\u2264\u2009p\u2009\u2264\u2009n) \u2014 the number of brackets in the correct bracket sequence, the number of operations and the initial position of cursor. Positions in the sequence are numbered from left to right, starting from one. It is guaranteed that n is even.\u000aIt is followed by the string of n characters "(" and ")" forming the correct bracket sequence.\u000aThen follow a string of m characters "L", "R" and "D" \u2014 a sequence of the operations. Operations are carried out one by one from the first to the last. It is guaranteed that the given operations never move the cursor outside the bracket sequence, as well as the fact that after all operations a bracket sequence will be non-empty.\u000aOutput\u000aPrint the correct bracket sequence, obtained as a result of applying all operations to the initial sequence.\u000aExamples\u000ainput\u000a8 4 5\u000a(())()()\u000aRDLD\u000aoutput\u000a()\u000ainput\u000a12 5 3\u000a((()())(()))\u000aRRDLD\u000aoutput\u000a(()(()))\u000ainput\u000a8 8 8\u000a(())()()\u000aLLLLLLDD\u000aoutput\u000a()()\u000aNote\u000aIn the first sample the cursor is initially at position 5. Consider actions of the editor:\u000acommand "R" \u2014 the cursor moves to the position 6 on the right;\u000acommand "D" \u2014 the deletion of brackets from the position 5 to the position 6. After that CBS takes the form (())(), the cursor is at the position 5;\u000acommand "L" \u2014 the cursor moves to the position 4 on the left;\u000acommand "D" \u2014 the deletion of brackets from the position 1 to the position 4. After that CBS takes the form (), the cursor is at the position 1.\u000aThus, the answer is equal to ().
p3
sS'problemStatement'
p4
VE. Correct Bracket Sequence Editor\u000atime limit per test2 seconds\u000amemory limit per test256 megabytes\u000ainputstandard input\u000aoutputstandard output\u000aRecently Polycarp started to develop a text editor that works only with correct bracket sequences (abbreviated as CBS).\u000aNote that a bracket sequence is correct if it is possible to get a correct mathematical expression by adding "+"-s and "1"-s to it. For example, sequences "(())()", "()" and "(()(()))" are correct, while ")(", "(()" and "(()))(" are not. Each bracket in CBS has a pair. For example, in "(()(()))":\u000a1st bracket is paired with 8th,\u000a2d bracket is paired with 3d,\u000a3d bracket is paired with 2d,\u000a4th bracket is paired with 7th,\u000a5th bracket is paired with 6th,\u000a6th bracket is paired with 5th,\u000a7th bracket is paired with 4th,\u000a8th bracket is paired with 1st.\u000aPolycarp's editor currently supports only three operations during the use of CBS. The cursor in the editor takes the whole position of one of the brackets (not the position between the brackets!). There are three operations being supported:\u000a«L» \u2014 move the cursor one position to the left,\u000a«R» \u2014 move the cursor one position to the right,\u000a«D» \u2014 delete the bracket in which the cursor is located, delete the bracket it's paired to and all brackets between them (that is, delete a substring between the bracket in which the cursor is located and the one it's paired to).\u000aAfter the operation "D" the cursor moves to the nearest bracket to the right (of course, among the non-deleted). If there is no such bracket (that is, the suffix of the CBS was deleted), then the cursor moves to the nearest bracket to the left (of course, among the non-deleted).\u000aThere are pictures illustrated several usages of operation "D" below.\u000aAll incorrect operations (shift cursor over the end of CBS, delete the whole CBS, etc.) are not supported by Polycarp's editor.\u000aPolycarp is very proud of his development, can you implement the functionality of his editor?\u000aInput\u000aThe first line contains three positive integers n, m and p (2\u2009\u2264\u2009n\u2009\u2264\u2009500\u2009000, 1\u2009\u2264\u2009m\u2009\u2264\u2009500\u2009000, 1\u2009\u2264\u2009p\u2009\u2264\u2009n) \u2014 the number of brackets in the correct bracket sequence, the number of operations and the initial position of cursor. Positions in the sequence are numbered from left to right, starting from one. It is guaranteed that n is even.\u000aIt is followed by the string of n characters "(" and ")" forming the correct bracket sequence.\u000aThen follow a string of m characters "L", "R" and "D" \u2014 a sequence of the operations. Operations are carried out one by one from the first to the last. It is guaranteed that the given operations never move the cursor outside the bracket sequence, as well as the fact that after all operations a bracket sequence will be non-empty.\u000aOutput\u000aPrint the correct bracket sequence, obtained as a result of applying all operations to the initial sequence.\u000aExamples\u000ainput\u000a8 4 5\u000a(())()()\u000aRDLD\u000aoutput\u000a()\u000ainput\u000a12 5 3\u000a((()())(()))\u000aRRDLD\u000aoutput\u000a(()(()))\u000ainput\u000a8 8 8\u000a(())()()\u000aLLLLLLDD\u000aoutput\u000a()()\u000aNote\u000aIn the first sample the cursor is initially at position 5. Consider actions of the editor:\u000acommand "R" \u2014 the cursor moves to the position 6 on the right;\u000acommand "D" \u2014 the deletion of brackets from the position 5 to the position 6. After that CBS takes the form (())(), the cursor is at the position 5;\u000acommand "L" \u2014 the cursor moves to the position 4 on the left;\u000acommand "D" \u2014 the deletion of brackets from the position 1 to the position 4. After that CBS takes the form (), the cursor is at the position 1.\u000aThus, the answer is equal to ().
p5
sS'name'
p6
VE. Correct Bracket Sequence Editor
p7
sS'tags'
p8
Vdata structures dsu 
p9
sS'url'
p10
Vhttp://codeforces.com/problemset/problem/670/E
p11
sS'memorylimit'
p12
V256 megabytes
p13
sS'timelimit'
p14
V2 seconds
p15
sS'problemId'
p16
V670/E
p17
sS'id'
p18
c__builtin__
id
p19
sb.